[{"name":"ERROR_DB_NOT_AVAILABLE","description":"Message.ERROR_DB_NOT_AVAILABLE","location":"-warehouse-service/[root]/-message/-e-r-r-o-r_-d-b_-n-o-t_-a-v-a-i-l-a-b-l-e/index.html","searchKeys":["ERROR_DB_NOT_AVAILABLE","ERROR_DB_NOT_AVAILABLE","Message.ERROR_DB_NOT_AVAILABLE"]},{"name":"ERROR_EMPTY_WAREHOUSE","description":"Message.ERROR_EMPTY_WAREHOUSE","location":"-warehouse-service/[root]/-message/-e-r-r-o-r_-e-m-p-t-y_-w-a-r-e-h-o-u-s-e/index.html","searchKeys":["ERROR_EMPTY_WAREHOUSE","ERROR_EMPTY_WAREHOUSE","Message.ERROR_EMPTY_WAREHOUSE"]},{"name":"ERROR_INGREDIENT_ALREADY_EXISTS","description":"Message.ERROR_INGREDIENT_ALREADY_EXISTS","location":"-warehouse-service/[root]/-message/-e-r-r-o-r_-i-n-g-r-e-d-i-e-n-t_-a-l-r-e-a-d-y_-e-x-i-s-t-s/index.html","searchKeys":["ERROR_INGREDIENT_ALREADY_EXISTS","ERROR_INGREDIENT_ALREADY_EXISTS","Message.ERROR_INGREDIENT_ALREADY_EXISTS"]},{"name":"ERROR_INGREDIENT_NOT_FOUND","description":"Message.ERROR_INGREDIENT_NOT_FOUND","location":"-warehouse-service/[root]/-message/-e-r-r-o-r_-i-n-g-r-e-d-i-e-n-t_-n-o-t_-f-o-u-n-d/index.html","searchKeys":["ERROR_INGREDIENT_NOT_FOUND","ERROR_INGREDIENT_NOT_FOUND","Message.ERROR_INGREDIENT_NOT_FOUND"]},{"name":"ERROR_INGREDIENT_QUANTITY","description":"Message.ERROR_INGREDIENT_QUANTITY","location":"-warehouse-service/[root]/-message/-e-r-r-o-r_-i-n-g-r-e-d-i-e-n-t_-q-u-a-n-t-i-t-y/index.html","searchKeys":["ERROR_INGREDIENT_QUANTITY","ERROR_INGREDIENT_QUANTITY","Message.ERROR_INGREDIENT_QUANTITY"]},{"name":"ERROR_WRONG_PARAMETERS","description":"Message.ERROR_WRONG_PARAMETERS","location":"-warehouse-service/[root]/-message/-e-r-r-o-r_-w-r-o-n-g_-p-a-r-a-m-e-t-e-r-s/index.html","searchKeys":["ERROR_WRONG_PARAMETERS","ERROR_WRONG_PARAMETERS","Message.ERROR_WRONG_PARAMETERS"]},{"name":"OK","description":"Message.OK","location":"-warehouse-service/[root]/-message/-o-k/index.html","searchKeys":["OK","OK","Message.OK"]},{"name":"abstract suspend fun createIngredient(context: RoutingContext)","description":"handlers.Handler.createIngredient","location":"-warehouse-service/handlers/-handler/create-ingredient.html","searchKeys":["createIngredient","abstract suspend fun createIngredient(context: RoutingContext)","handlers.Handler.createIngredient"]},{"name":"abstract suspend fun createIngredient(ingredient: Ingredient): WarehouseServiceResponse<Ingredient>","description":"application.WarehouseService.createIngredient","location":"-warehouse-service/application/-warehouse-service/create-ingredient.html","searchKeys":["createIngredient","abstract suspend fun createIngredient(ingredient: Ingredient): WarehouseServiceResponse<Ingredient>","application.WarehouseService.createIngredient"]},{"name":"abstract suspend fun createIngredient(name: String, quantity: Int): RepositoryResponse<Ingredient>","description":"repository.Repository.createIngredient","location":"-warehouse-service/repository/-repository/create-ingredient.html","searchKeys":["createIngredient","abstract suspend fun createIngredient(name: String, quantity: Int): RepositoryResponse<Ingredient>","repository.Repository.createIngredient"]},{"name":"abstract suspend fun decreaseIngredientQuantity(name: String, quantity: Int): RepositoryResponse<Ingredient>","description":"repository.Repository.decreaseIngredientQuantity","location":"-warehouse-service/repository/-repository/decrease-ingredient-quantity.html","searchKeys":["decreaseIngredientQuantity","abstract suspend fun decreaseIngredientQuantity(name: String, quantity: Int): RepositoryResponse<Ingredient>","repository.Repository.decreaseIngredientQuantity"]},{"name":"abstract suspend fun getAllAvailableIngredients(): RepositoryResponse<List<Ingredient>>","description":"repository.Repository.getAllAvailableIngredients","location":"-warehouse-service/repository/-repository/get-all-available-ingredients.html","searchKeys":["getAllAvailableIngredients","abstract suspend fun getAllAvailableIngredients(): RepositoryResponse<List<Ingredient>>","repository.Repository.getAllAvailableIngredients"]},{"name":"abstract suspend fun getAllAvailableIngredients(): WarehouseServiceResponse<List<Ingredient>>","description":"application.WarehouseService.getAllAvailableIngredients","location":"-warehouse-service/application/-warehouse-service/get-all-available-ingredients.html","searchKeys":["getAllAvailableIngredients","abstract suspend fun getAllAvailableIngredients(): WarehouseServiceResponse<List<Ingredient>>","application.WarehouseService.getAllAvailableIngredients"]},{"name":"abstract suspend fun getAllAvailableIngredients(context: RoutingContext)","description":"handlers.Handler.getAllAvailableIngredients","location":"-warehouse-service/handlers/-handler/get-all-available-ingredients.html","searchKeys":["getAllAvailableIngredients","abstract suspend fun getAllAvailableIngredients(context: RoutingContext)","handlers.Handler.getAllAvailableIngredients"]},{"name":"abstract suspend fun getAllIngredients(): RepositoryResponse<List<Ingredient>>","description":"repository.Repository.getAllIngredients","location":"-warehouse-service/repository/-repository/get-all-ingredients.html","searchKeys":["getAllIngredients","abstract suspend fun getAllIngredients(): RepositoryResponse<List<Ingredient>>","repository.Repository.getAllIngredients"]},{"name":"abstract suspend fun getAllIngredients(): WarehouseServiceResponse<List<Ingredient>>","description":"application.WarehouseService.getAllIngredients","location":"-warehouse-service/application/-warehouse-service/get-all-ingredients.html","searchKeys":["getAllIngredients","abstract suspend fun getAllIngredients(): WarehouseServiceResponse<List<Ingredient>>","application.WarehouseService.getAllIngredients"]},{"name":"abstract suspend fun getAllIngredients(context: RoutingContext)","description":"handlers.Handler.getAllIngredients","location":"-warehouse-service/handlers/-handler/get-all-ingredients.html","searchKeys":["getAllIngredients","abstract suspend fun getAllIngredients(context: RoutingContext)","handlers.Handler.getAllIngredients"]},{"name":"abstract suspend fun getIngredientQuantity(name: String): RepositoryResponse<Int?>","description":"repository.Repository.getIngredientQuantity","location":"-warehouse-service/repository/-repository/get-ingredient-quantity.html","searchKeys":["getIngredientQuantity","abstract suspend fun getIngredientQuantity(name: String): RepositoryResponse<Int?>","repository.Repository.getIngredientQuantity"]},{"name":"abstract suspend fun isIngredientPresent(name: String): Message","description":"repository.Repository.isIngredientPresent","location":"-warehouse-service/repository/-repository/is-ingredient-present.html","searchKeys":["isIngredientPresent","abstract suspend fun isIngredientPresent(name: String): Message","repository.Repository.isIngredientPresent"]},{"name":"abstract suspend fun restock(context: RoutingContext)","description":"handlers.Handler.restock","location":"-warehouse-service/handlers/-handler/restock.html","searchKeys":["restock","abstract suspend fun restock(context: RoutingContext)","handlers.Handler.restock"]},{"name":"abstract suspend fun restock(ingredient: UpdateQuantity): WarehouseServiceResponse<Ingredient>","description":"application.WarehouseService.restock","location":"-warehouse-service/application/-warehouse-service/restock.html","searchKeys":["restock","abstract suspend fun restock(ingredient: UpdateQuantity): WarehouseServiceResponse<Ingredient>","application.WarehouseService.restock"]},{"name":"abstract suspend fun restock(name: String, quantity: Int): RepositoryResponse<Ingredient>","description":"repository.Repository.restock","location":"-warehouse-service/repository/-repository/restock.html","searchKeys":["restock","abstract suspend fun restock(name: String, quantity: Int): RepositoryResponse<Ingredient>","repository.Repository.restock"]},{"name":"abstract suspend fun updateConsumedIngredientsQuantity(context: RoutingContext)","description":"handlers.Handler.updateConsumedIngredientsQuantity","location":"-warehouse-service/handlers/-handler/update-consumed-ingredients-quantity.html","searchKeys":["updateConsumedIngredientsQuantity","abstract suspend fun updateConsumedIngredientsQuantity(context: RoutingContext)","handlers.Handler.updateConsumedIngredientsQuantity"]},{"name":"abstract suspend fun updateConsumedIngredientsQuantity(ingredients: List<UpdateQuantity>): WarehouseServiceResponse<List<Ingredient>>","description":"application.WarehouseService.updateConsumedIngredientsQuantity","location":"-warehouse-service/application/-warehouse-service/update-consumed-ingredients-quantity.html","searchKeys":["updateConsumedIngredientsQuantity","abstract suspend fun updateConsumedIngredientsQuantity(ingredients: List<UpdateQuantity>): WarehouseServiceResponse<List<Ingredient>>","application.WarehouseService.updateConsumedIngredientsQuantity"]},{"name":"class HandlerImpl(mongoInfo: MongoInfo) : Handler","description":"handlers.HandlerImpl","location":"-warehouse-service/handlers/-handler-impl/index.html","searchKeys":["HandlerImpl","class HandlerImpl(mongoInfo: MongoInfo) : Handler","handlers.HandlerImpl"]},{"name":"class Quantity(val quantity: Int)","description":"Quantity","location":"-warehouse-service/[root]/-quantity/index.html","searchKeys":["Quantity","class Quantity(val quantity: Int)","Quantity"]},{"name":"class RepositoryImpl(mongoInfo: MongoInfo) : Repository","description":"repository.RepositoryImpl","location":"-warehouse-service/repository/-repository-impl/index.html","searchKeys":["RepositoryImpl","class RepositoryImpl(mongoInfo: MongoInfo) : Repository","repository.RepositoryImpl"]},{"name":"class Server(mongoInfo: MongoInfo, port: Int) : CoroutineVerticle","description":"server.Server","location":"-warehouse-service/server/-server/index.html","searchKeys":["Server","class Server(mongoInfo: MongoInfo, port: Int) : CoroutineVerticle","server.Server"]},{"name":"class UpdateQuantity(val name: String, val quantity: Int)","description":"UpdateQuantity","location":"-warehouse-service/[root]/-update-quantity/index.html","searchKeys":["UpdateQuantity","class UpdateQuantity(val name: String, val quantity: Int)","UpdateQuantity"]},{"name":"class WarehouseServiceImpl(mongoInfo: MongoInfo) : WarehouseService","description":"application.WarehouseServiceImpl","location":"-warehouse-service/application/-warehouse-service-impl/index.html","searchKeys":["WarehouseServiceImpl","class WarehouseServiceImpl(mongoInfo: MongoInfo) : WarehouseService","application.WarehouseServiceImpl"]},{"name":"constructor(data: Data?, message: Message)","description":"repository.RepositoryResponse.RepositoryResponse","location":"-warehouse-service/repository/-repository-response/-repository-response.html","searchKeys":["RepositoryResponse","constructor(data: Data?, message: Message)","repository.RepositoryResponse.RepositoryResponse"]},{"name":"constructor(data: Data?, response: Message)","description":"application.WarehouseServiceResponse.WarehouseServiceResponse","location":"-warehouse-service/application/-warehouse-service-response/-warehouse-service-response.html","searchKeys":["WarehouseServiceResponse","constructor(data: Data?, response: Message)","application.WarehouseServiceResponse.WarehouseServiceResponse"]},{"name":"constructor(mongoAddress: String = if (System.getenv(\"DB_CONNECTION_ADDRESS\") == null) {\n            \"mongodb://localhost:27017\"\n        } else {\n            System.getenv(\n                \"DB_CONNECTION_ADDRESS\",\n            )\n        }, databaseName: String = \"Warehouse\", collectionName: String = \"Ingredient\")","description":"MongoInfo.MongoInfo","location":"-warehouse-service/[root]/-mongo-info/-mongo-info.html","searchKeys":["MongoInfo","constructor(mongoAddress: String = if (System.getenv(\"DB_CONNECTION_ADDRESS\") == null) {\n            \"mongodb://localhost:27017\"\n        } else {\n            System.getenv(\n                \"DB_CONNECTION_ADDRESS\",\n            )\n        }, databaseName: String = \"Warehouse\", collectionName: String = \"Ingredient\")","MongoInfo.MongoInfo"]},{"name":"constructor(mongoInfo: MongoInfo)","description":"application.WarehouseServiceImpl.WarehouseServiceImpl","location":"-warehouse-service/application/-warehouse-service-impl/-warehouse-service-impl.html","searchKeys":["WarehouseServiceImpl","constructor(mongoInfo: MongoInfo)","application.WarehouseServiceImpl.WarehouseServiceImpl"]},{"name":"constructor(mongoInfo: MongoInfo)","description":"handlers.HandlerImpl.HandlerImpl","location":"-warehouse-service/handlers/-handler-impl/-handler-impl.html","searchKeys":["HandlerImpl","constructor(mongoInfo: MongoInfo)","handlers.HandlerImpl.HandlerImpl"]},{"name":"constructor(mongoInfo: MongoInfo)","description":"repository.RepositoryImpl.RepositoryImpl","location":"-warehouse-service/repository/-repository-impl/-repository-impl.html","searchKeys":["RepositoryImpl","constructor(mongoInfo: MongoInfo)","repository.RepositoryImpl.RepositoryImpl"]},{"name":"constructor(mongoInfo: MongoInfo, port: Int)","description":"server.Server.Server","location":"-warehouse-service/server/-server/-server.html","searchKeys":["Server","constructor(mongoInfo: MongoInfo, port: Int)","server.Server.Server"]},{"name":"constructor(name: String, quantity: Int)","description":"UpdateQuantity.UpdateQuantity","location":"-warehouse-service/[root]/-update-quantity/-update-quantity.html","searchKeys":["UpdateQuantity","constructor(name: String, quantity: Int)","UpdateQuantity.UpdateQuantity"]},{"name":"constructor(name: String, quantity: Int)","description":"domain.Ingredient.Ingredient","location":"-warehouse-service/domain/-ingredient/-ingredient.html","searchKeys":["Ingredient","constructor(name: String, quantity: Int)","domain.Ingredient.Ingredient"]},{"name":"constructor(quantity: Int)","description":"Quantity.Quantity","location":"-warehouse-service/[root]/-quantity/-quantity.html","searchKeys":["Quantity","constructor(quantity: Int)","Quantity.Quantity"]},{"name":"data class Ingredient(val name: String, val quantity: Int)","description":"domain.Ingredient","location":"-warehouse-service/domain/-ingredient/index.html","searchKeys":["Ingredient","data class Ingredient(val name: String, val quantity: Int)","domain.Ingredient"]},{"name":"data class MongoInfo(var mongoAddress: String = if (System.getenv(\"DB_CONNECTION_ADDRESS\") == null) {\n            \"mongodb://localhost:27017\"\n        } else {\n            System.getenv(\n                \"DB_CONNECTION_ADDRESS\",\n            )\n        }, val databaseName: String = \"Warehouse\", val collectionName: String = \"Ingredient\")","description":"MongoInfo","location":"-warehouse-service/[root]/-mongo-info/index.html","searchKeys":["MongoInfo","data class MongoInfo(var mongoAddress: String = if (System.getenv(\"DB_CONNECTION_ADDRESS\") == null) {\n            \"mongodb://localhost:27017\"\n        } else {\n            System.getenv(\n                \"DB_CONNECTION_ADDRESS\",\n            )\n        }, val databaseName: String = \"Warehouse\", val collectionName: String = \"Ingredient\")","MongoInfo"]},{"name":"data class RepositoryResponse<Data>(val data: Data?, val message: Message)","description":"repository.RepositoryResponse","location":"-warehouse-service/repository/-repository-response/index.html","searchKeys":["RepositoryResponse","data class RepositoryResponse<Data>(val data: Data?, val message: Message)","repository.RepositoryResponse"]},{"name":"data class WarehouseServiceResponse<Data>(val data: Data?, val response: Message)","description":"application.WarehouseServiceResponse","location":"-warehouse-service/application/-warehouse-service-response/index.html","searchKeys":["WarehouseServiceResponse","data class WarehouseServiceResponse<Data>(val data: Data?, val response: Message)","application.WarehouseServiceResponse"]},{"name":"enum Message : Enum<Message> ","description":"Message","location":"-warehouse-service/[root]/-message/index.html","searchKeys":["Message","enum Message : Enum<Message> ","Message"]},{"name":"fun convert(warehouseMessage: Message): Int","description":"WarehouseMessageToCode.convert","location":"-warehouse-service/[root]/-warehouse-message-to-code/convert.html","searchKeys":["convert","fun convert(warehouseMessage: Message): Int","WarehouseMessageToCode.convert"]},{"name":"fun getMongoCollection(mongoInfo: MongoInfo): MongoCollection<Ingredient>","description":"server.MongoUtils.getMongoCollection","location":"-warehouse-service/server/-mongo-utils/get-mongo-collection.html","searchKeys":["getMongoCollection","fun getMongoCollection(mongoInfo: MongoInfo): MongoCollection<Ingredient>","server.MongoUtils.getMongoCollection"]},{"name":"fun main(args: Array<String>)","description":"server.Main.main","location":"-warehouse-service/server/-main/main.html","searchKeys":["main","fun main(args: Array<String>)","server.Main.main"]},{"name":"fun valueOf(value: String): Message","description":"Message.valueOf","location":"-warehouse-service/[root]/-message/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Message","Message.valueOf"]},{"name":"fun values(): Array<Message>","description":"Message.values","location":"-warehouse-service/[root]/-message/values.html","searchKeys":["values","fun values(): Array<Message>","Message.values"]},{"name":"interface Handler","description":"handlers.Handler","location":"-warehouse-service/handlers/-handler/index.html","searchKeys":["Handler","interface Handler","handlers.Handler"]},{"name":"interface Repository","description":"repository.Repository","location":"-warehouse-service/repository/-repository/index.html","searchKeys":["Repository","interface Repository","repository.Repository"]},{"name":"interface WarehouseService","description":"application.WarehouseService","location":"-warehouse-service/application/-warehouse-service/index.html","searchKeys":["WarehouseService","interface WarehouseService","application.WarehouseService"]},{"name":"object Main","description":"server.Main","location":"-warehouse-service/server/-main/index.html","searchKeys":["Main","object Main","server.Main"]},{"name":"object MongoUtils","description":"server.MongoUtils","location":"-warehouse-service/server/-mongo-utils/index.html","searchKeys":["MongoUtils","object MongoUtils","server.MongoUtils"]},{"name":"object WarehouseMessageToCode","description":"WarehouseMessageToCode","location":"-warehouse-service/[root]/-warehouse-message-to-code/index.html","searchKeys":["WarehouseMessageToCode","object WarehouseMessageToCode","WarehouseMessageToCode"]},{"name":"open suspend override fun createIngredient(context: RoutingContext)","description":"handlers.HandlerImpl.createIngredient","location":"-warehouse-service/handlers/-handler-impl/create-ingredient.html","searchKeys":["createIngredient","open suspend override fun createIngredient(context: RoutingContext)","handlers.HandlerImpl.createIngredient"]},{"name":"open suspend override fun createIngredient(ingredient: Ingredient): WarehouseServiceResponse<Ingredient>","description":"application.WarehouseServiceImpl.createIngredient","location":"-warehouse-service/application/-warehouse-service-impl/create-ingredient.html","searchKeys":["createIngredient","open suspend override fun createIngredient(ingredient: Ingredient): WarehouseServiceResponse<Ingredient>","application.WarehouseServiceImpl.createIngredient"]},{"name":"open suspend override fun createIngredient(name: String, quantity: Int): RepositoryResponse<Ingredient>","description":"repository.RepositoryImpl.createIngredient","location":"-warehouse-service/repository/-repository-impl/create-ingredient.html","searchKeys":["createIngredient","open suspend override fun createIngredient(name: String, quantity: Int): RepositoryResponse<Ingredient>","repository.RepositoryImpl.createIngredient"]},{"name":"open suspend override fun decreaseIngredientQuantity(name: String, quantity: Int): RepositoryResponse<Ingredient>","description":"repository.RepositoryImpl.decreaseIngredientQuantity","location":"-warehouse-service/repository/-repository-impl/decrease-ingredient-quantity.html","searchKeys":["decreaseIngredientQuantity","open suspend override fun decreaseIngredientQuantity(name: String, quantity: Int): RepositoryResponse<Ingredient>","repository.RepositoryImpl.decreaseIngredientQuantity"]},{"name":"open suspend override fun getAllAvailableIngredients(): RepositoryResponse<List<Ingredient>>","description":"repository.RepositoryImpl.getAllAvailableIngredients","location":"-warehouse-service/repository/-repository-impl/get-all-available-ingredients.html","searchKeys":["getAllAvailableIngredients","open suspend override fun getAllAvailableIngredients(): RepositoryResponse<List<Ingredient>>","repository.RepositoryImpl.getAllAvailableIngredients"]},{"name":"open suspend override fun getAllAvailableIngredients(): WarehouseServiceResponse<List<Ingredient>>","description":"application.WarehouseServiceImpl.getAllAvailableIngredients","location":"-warehouse-service/application/-warehouse-service-impl/get-all-available-ingredients.html","searchKeys":["getAllAvailableIngredients","open suspend override fun getAllAvailableIngredients(): WarehouseServiceResponse<List<Ingredient>>","application.WarehouseServiceImpl.getAllAvailableIngredients"]},{"name":"open suspend override fun getAllAvailableIngredients(context: RoutingContext)","description":"handlers.HandlerImpl.getAllAvailableIngredients","location":"-warehouse-service/handlers/-handler-impl/get-all-available-ingredients.html","searchKeys":["getAllAvailableIngredients","open suspend override fun getAllAvailableIngredients(context: RoutingContext)","handlers.HandlerImpl.getAllAvailableIngredients"]},{"name":"open suspend override fun getAllIngredients(): RepositoryResponse<List<Ingredient>>","description":"repository.RepositoryImpl.getAllIngredients","location":"-warehouse-service/repository/-repository-impl/get-all-ingredients.html","searchKeys":["getAllIngredients","open suspend override fun getAllIngredients(): RepositoryResponse<List<Ingredient>>","repository.RepositoryImpl.getAllIngredients"]},{"name":"open suspend override fun getAllIngredients(): WarehouseServiceResponse<List<Ingredient>>","description":"application.WarehouseServiceImpl.getAllIngredients","location":"-warehouse-service/application/-warehouse-service-impl/get-all-ingredients.html","searchKeys":["getAllIngredients","open suspend override fun getAllIngredients(): WarehouseServiceResponse<List<Ingredient>>","application.WarehouseServiceImpl.getAllIngredients"]},{"name":"open suspend override fun getAllIngredients(context: RoutingContext)","description":"handlers.HandlerImpl.getAllIngredients","location":"-warehouse-service/handlers/-handler-impl/get-all-ingredients.html","searchKeys":["getAllIngredients","open suspend override fun getAllIngredients(context: RoutingContext)","handlers.HandlerImpl.getAllIngredients"]},{"name":"open suspend override fun getIngredientQuantity(name: String): RepositoryResponse<Int?>","description":"repository.RepositoryImpl.getIngredientQuantity","location":"-warehouse-service/repository/-repository-impl/get-ingredient-quantity.html","searchKeys":["getIngredientQuantity","open suspend override fun getIngredientQuantity(name: String): RepositoryResponse<Int?>","repository.RepositoryImpl.getIngredientQuantity"]},{"name":"open suspend override fun isIngredientPresent(name: String): Message","description":"repository.RepositoryImpl.isIngredientPresent","location":"-warehouse-service/repository/-repository-impl/is-ingredient-present.html","searchKeys":["isIngredientPresent","open suspend override fun isIngredientPresent(name: String): Message","repository.RepositoryImpl.isIngredientPresent"]},{"name":"open suspend override fun restock(context: RoutingContext)","description":"handlers.HandlerImpl.restock","location":"-warehouse-service/handlers/-handler-impl/restock.html","searchKeys":["restock","open suspend override fun restock(context: RoutingContext)","handlers.HandlerImpl.restock"]},{"name":"open suspend override fun restock(ingredient: UpdateQuantity): WarehouseServiceResponse<Ingredient>","description":"application.WarehouseServiceImpl.restock","location":"-warehouse-service/application/-warehouse-service-impl/restock.html","searchKeys":["restock","open suspend override fun restock(ingredient: UpdateQuantity): WarehouseServiceResponse<Ingredient>","application.WarehouseServiceImpl.restock"]},{"name":"open suspend override fun restock(name: String, quantity: Int): RepositoryResponse<Ingredient>","description":"repository.RepositoryImpl.restock","location":"-warehouse-service/repository/-repository-impl/restock.html","searchKeys":["restock","open suspend override fun restock(name: String, quantity: Int): RepositoryResponse<Ingredient>","repository.RepositoryImpl.restock"]},{"name":"open suspend override fun updateConsumedIngredientsQuantity(context: RoutingContext)","description":"handlers.HandlerImpl.updateConsumedIngredientsQuantity","location":"-warehouse-service/handlers/-handler-impl/update-consumed-ingredients-quantity.html","searchKeys":["updateConsumedIngredientsQuantity","open suspend override fun updateConsumedIngredientsQuantity(context: RoutingContext)","handlers.HandlerImpl.updateConsumedIngredientsQuantity"]},{"name":"open suspend override fun updateConsumedIngredientsQuantity(ingredients: List<UpdateQuantity>): WarehouseServiceResponse<List<Ingredient>>","description":"application.WarehouseServiceImpl.updateConsumedIngredientsQuantity","location":"-warehouse-service/application/-warehouse-service-impl/update-consumed-ingredients-quantity.html","searchKeys":["updateConsumedIngredientsQuantity","open suspend override fun updateConsumedIngredientsQuantity(ingredients: List<UpdateQuantity>): WarehouseServiceResponse<List<Ingredient>>","application.WarehouseServiceImpl.updateConsumedIngredientsQuantity"]},{"name":"val collectionName: String","description":"MongoInfo.collectionName","location":"-warehouse-service/[root]/-mongo-info/collection-name.html","searchKeys":["collectionName","val collectionName: String","MongoInfo.collectionName"]},{"name":"val data: Data?","description":"application.WarehouseServiceResponse.data","location":"-warehouse-service/application/-warehouse-service-response/data.html","searchKeys":["data","val data: Data?","application.WarehouseServiceResponse.data"]},{"name":"val data: Data?","description":"repository.RepositoryResponse.data","location":"-warehouse-service/repository/-repository-response/data.html","searchKeys":["data","val data: Data?","repository.RepositoryResponse.data"]},{"name":"val databaseName: String","description":"MongoInfo.databaseName","location":"-warehouse-service/[root]/-mongo-info/database-name.html","searchKeys":["databaseName","val databaseName: String","MongoInfo.databaseName"]},{"name":"val entries: EnumEntries<Message>","description":"Message.entries","location":"-warehouse-service/[root]/-message/entries.html","searchKeys":["entries","val entries: EnumEntries<Message>","Message.entries"]},{"name":"val message: Message","description":"repository.RepositoryResponse.message","location":"-warehouse-service/repository/-repository-response/message.html","searchKeys":["message","val message: Message","repository.RepositoryResponse.message"]},{"name":"val name: String","description":"UpdateQuantity.name","location":"-warehouse-service/[root]/-update-quantity/name.html","searchKeys":["name","val name: String","UpdateQuantity.name"]},{"name":"val name: String","description":"domain.Ingredient.name","location":"-warehouse-service/domain/-ingredient/name.html","searchKeys":["name","val name: String","domain.Ingredient.name"]},{"name":"val quantity: Int","description":"Quantity.quantity","location":"-warehouse-service/[root]/-quantity/quantity.html","searchKeys":["quantity","val quantity: Int","Quantity.quantity"]},{"name":"val quantity: Int","description":"UpdateQuantity.quantity","location":"-warehouse-service/[root]/-update-quantity/quantity.html","searchKeys":["quantity","val quantity: Int","UpdateQuantity.quantity"]},{"name":"val quantity: Int","description":"domain.Ingredient.quantity","location":"-warehouse-service/domain/-ingredient/quantity.html","searchKeys":["quantity","val quantity: Int","domain.Ingredient.quantity"]},{"name":"val response: Message","description":"application.WarehouseServiceResponse.response","location":"-warehouse-service/application/-warehouse-service-response/response.html","searchKeys":["response","val response: Message","application.WarehouseServiceResponse.response"]},{"name":"var mongoAddress: String","description":"MongoInfo.mongoAddress","location":"-warehouse-service/[root]/-mongo-info/mongo-address.html","searchKeys":["mongoAddress","var mongoAddress: String","MongoInfo.mongoAddress"]}]
